---
# upload.yaml
#
# CI/CD script configuration file
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-10-07


# absolute path to git credentials file on remote host
path_to_git_creds:     ${HOME}/.git-credentials

# path to folder with info files, relative to project root
path_to_info_files:    doc/json/Build Upload Deploy Info

# container namespace used locally when building image
local_namespace:       desmodyne

# container namespace used when uploading image to gitlab registry
# NOTE: this goes into the docker registry url and must be all lowercase,
# otherwise tagging the image fails with
#   Error parsing reference: "<repo url>:<tag>" is not a valid repository/tag:
#   invalid reference format: repository name must be lowercase
gitlab_namespace:      desmodyne/projects/mailflow/database

# gitlab container registry url
gitlab_reg_url:        registry.gitlab.com


# date format used for timestamp in info filename
date_format_string:    +%Y%m%d-%H%M%S%z

# git commit message template for info file
git_msg_tmpl:          '[#1]: UPLOAD - version %s - image %s'

# git username when running in CI/CD context
git_ci_user:           Bob the Builder

# git user email address when running in CI/CD context
git_ci_email:          bob.the.builder@desmodyne.com

# gitlab.com username when running in CI/CD context
gitlab_ci_user:        dd-bob

# info filename template
info_filename_tmpl:    '%s version %s.upload.json'

# regular expression to get hash from build info file commit message
regex_git_msg_build:   '\[#1\]: BUILD - version .*g\(.*\) - image \(.*\)'

# regular expression to get upload version and image ID from commit message
regex_git_msg_upload:  '\[#1\]: UPLOAD - version \(.*\) - image \(.*\)'

# regex template to get username and password from a line in .git-credentials
regex_git_creds_tmpl:  https://%s:%s@gitlab.com

# regex to get path from 'git remote get-url origin' output
regex_git_remote_path: .*@gitlab.com/\(.*\)


# list of data sets to configure container images
images:

  # name of the container image
  ci-mailflow-database_dev:

    # docker container image tag naming pattern: <stage>-<hash|semver>
    # first part of the tag name: stage, i.e. feature, develop, release, master
    # second part of the tag name:
    #   feature and develop branches : hash SHA1 sum of the most recent commit
    #   release and master branches  : semantic version / repo tag, e.g. 0.5.0
    # build CI/CD script determines stage and replaces '<image_tag>' by value;
    # both commit and semver will have a -DIRTY suffix if building from unclean
    image_tag:        <image_tag>
