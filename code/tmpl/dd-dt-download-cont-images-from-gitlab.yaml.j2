---
# deploy.yaml
#
# deploy configuration file
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-12-25


# NOTE: this file is used as configuration file for the deploy CI/CD script,
# copied to the remote host being deployed to and used as conf file there again


# -----------------------------------------------------------------------------
# configuration properties used on local host

# path to folder with info files, relative to project root
path_to_info_files:    doc/json/Build Upload Deploy Info

# path to local temp folder, relative to project root;
# in this folder, (a possibly modified version of) files will be provided
# for DockerTools > dd-dt-run-remote to copy to the remote host for deployment
path_to_local_tmp:     tmp/deploy

# absolute path to file with vault token
path_to_vault_token:   ${HOME}/.vault-credentials/vault.mailflow.dev

# name of remote host
# NOTE: this expects SSH access to be configured in ~/.ssc/config
host_name:             contabo

# full URL of the vault instance to get secrets from
vault_host:            https://vault.mailflow.dev

# path into vault where secrets are stored, relative to vault_host
vault_root:            v1/cubbyhole/database

# vault path for gitlab registry reader secret, relative to vault_root
vault_path:            gitlab-registry-credentials


# files to provide at defined (temp) location, ready for use on remote host
files_to_copy:

    # scripts to run on remote host, must be available in local PATH
    script_names:
      - dd-dt-download-cont-images-from-gitlab
      - dd-dt-run-image

    # path to conf file to pass to script, relative project root
    # NOTE: it seems this has not been used for a while; remove ?
    # config_file: cicd/conf/feature/deploy.yaml

    # path to env to use with 'docker run', relative project root
    # TODO: this is not currently used, but might be in the future
    # docker_env_file: conf/docker/feature/ci-mailflow-database.env


# -----------------------------------------------------------------------------
# configuration properties used on remote host

# absolute path to git credentials file on remote host
path_to_git_creds:     ${HOME}/.git-credentials

# container namespace used locally when building image
local_namespace:       desmodyne

# container namespace used when uploading image to gitlab registry
gitlab_namespace:      desmodyne/projects/mailflow/database

# gitlab container registry url
gitlab_reg_url:        registry.gitlab.com

# https://docs.gitlab.com/ee/user/project/deploy_tokens

# NOTE: when running on gitlab CI/CD, these credentials are set at deploy time
# TODO: get these from a HashiCorp Vault instance for manual deployment

# gitlab container registry username
gitlab_username: <username>

# gitlab container registry password
gitlab_password: <password>

# date format used for timestamp in info filename
date_format_string:    +%Y%m%d-%H%M%S%z

# git commit message template for info file
git_msg_tmpl:          '[#1]: DEPLOY - version %s - image %s'

# git username when running in CI/CD context
git_ci_user:           Bob the Builder

# git user email address when running in CI/CD context
git_ci_email:          bob.the.builder@desmodyne.com

# gitlab.com username when running in CI/CD context
gitlab_ci_user:        dd-bob

# info filename template
info_filename_tmpl:    '%s version %s.upload.json'

# regular expression to get hash from build info file commit message
regex_git_msg_build:   '\[#1\]: BUILD - version .*g\(.*\) - image \(.*\)'

# regular expression to get upload version and image ID from commit message
regex_git_msg_deploy:  '\[#1\]: DEPLOY - version \(.*\) - image \(.*\)'

# regex template to get username and password from a line in .git-credentials
regex_git_creds_tmpl:  https://%s:%s@gitlab.com

# regex to get path from 'git remote get-url origin' output
regex_git_remote_path: .*@gitlab.com/\(.*\)


# list of data sets to configure container images
images:

  # name of the container image
  ci-mailflow-database_dev:

    # name of container when run off image
    cont_name:        ct-mailflow-database

    # name of container env file
    # TODO: this is not currently used, but might be in the future
    # env_file: ci-mailflow-database.env

    # docker container image tag naming pattern: <stage>-<hash|semver>
    # first part of the tag name: stage, i.e. feature, develop, release, master
    # second part of the tag name:
    #   feature and develop branches : hash SHA1 sum of the most recent commit
    #   release and master branches  : semantic version / repo tag, e.g. 0.5.0
    # build CI/CD script determines stage and replaces '<image_tag>' by value;
    # both commit and semver will have a -DIRTY suffix if building from unclean
    image_tag:        <image_tag>

    # network name; must match nginx / nginx-le network name;
    # see InfoSec/Lets Encrypt/code/docker/cc-nginx-proxy/docker-compose.yml
    network_name:     net-nginx-proxy

    # container volumes; must match paths set in base and in this container
    # https://docs.docker.com/v17.12/edge/engine/reference/commandline/ ...
    #  ... run/#add-bind-mounts-or-volumes-using-the-mount-flag
    # https://docs.docker.com/v17.12/edge/engine/reference/commandline/ ...
    #  ... service_create/#add-bind-mounts-volumes-or-memory-filesystems
    # https://docs.docker.com/storage/volumes
    # NOTE: mounts / volumes are not created explicitly up front, but by passing
    # corresponding arguments to docker run; adding this doc for completeness:
    # https://docs.docker.com/v17.12/engine/reference/commandline/volume_create
    volumes:
      - source: ci-mailflow-database-data
        target: /var/lib/postgresql/data


  # TODO: deploy ci-mailflow-database_test for testing ?
