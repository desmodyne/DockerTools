#!/usr/bin/env bash

# dd-build-cont-images
#
# build Docker container images defined by only a Dockerfile
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2017-05-26


# NOTE: see also dd-build-cont-comps


echo
echo 'build Docker container images'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('docker' 'jq' 'realpath' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if ! output="$(source "${path_to_bashlib}" 2>&1)"
then
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
source "${path_to_bashlib}"


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# shellcheck disable=SC2154
conf="$(yq r -j "${conf_file}")"

local_namespace="$(jq -r '.local_namespace'   <<< "${conf}")"
image_confs="$(    jq -r '.images'            <<< "${conf}")"
rel_target_root="$(jq -r '.path_to_proj_root' <<< "${conf}")"
path_to_secrets="$(jq -r '.path_to_secrets'   <<< "${conf}")"


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# path to folder that contains configuration file
if ! path_to_conf_folder="$(dirname "${conf_file}")"
then
    exit 1
fi

# absolute, canonical path to TARGET project root
path_to_target_root="$(realpath "${path_to_conf_folder}/${rel_target_root}")"

# absolute, canonical path to secrets folder in TARGET project
# NOTE: not using realpath as this folder usually doesn't exist yet
# do this only if target project has secret files;
#  testing this in addition to testing secrets_files for null below
if [ "${path_to_secrets}" != 'null' ]
then
    path_to_secrets="${path_to_target_root}/${path_to_secrets}"
fi


# -----------------------------------------------------------------------------
# build Docker container images


if ! pushd "${path_to_target_root}" > /dev/null
then
    echo "Failed to pushd to target project root ${path_to_target_root}"
    exit 1
fi


echo

if [ "${path_to_secrets}" != 'null' ]
then
    if [ ! -d "${path_to_secrets}" ]
    then
        mkdir -p "${path_to_secrets}"
    fi
fi

if ! image_names="$(jq -r 'keys[]' <<< "${image_confs}" | sort)"
then
    exit 1
fi

for image_name in ${image_names}
do
    echo "container image name: ${image_name}"
    echo

    if ! image_conf="$(jq -r ".\"${image_name}\"" <<< "${image_confs}")"
    then
        exit 1
    fi

    if ! image_conf_path="$(jq -r '.image_conf_path' <<< "${image_conf}")"
    then
        exit 1
    fi

    if ! image_tag="$(jq -r '.image_tag' <<< "${image_conf}")"
    then
        exit 1
    fi

    secrets_files="$(jq '.secrets_files' <<< "${image_conf}")"
    if [ "${path_to_secrets}" != 'null' ] && [ "${secrets_files}" != 'null' ]
    then
        secrets_files="$(jq -r '.[]' <<< "${secrets_files}")"
        OLD_IFS="${IFS}" && IFS=$'\n'
        for secrets_file in ${secrets_files}
        do
            if ! cp "${secrets_file}" "${path_to_secrets}/"
            then
                echo 'Failed to copy file'
                echo "  $(realpath "${secrets_file}")"
                exit 1
            fi
        done
        IFS="${OLD_IFS}"
    fi

    if [ ! -f "${image_conf_path}" ]
    then
        # NOTE: not using realpath as it always fails with
        #   realpath: <image_conf_path>: No such file or directory
        echo 'Failed to find container image configuration file at'
        echo "  $("${image_conf_path}")"
        exit 1
    fi

    echo "build ${image_name} with"
    echo "  $(realpath "${image_conf_path}"):"
    echo

    # NOTE: tagging the image when building is simpler than separate steps
    if ! docker build --file "${image_conf_path}" \
                      --tag  "${local_namespace}/${image_name}:${image_tag}" \
                      "$(pwd)"
    then
        exit 1
    fi

    if [ "${path_to_secrets}" != 'null' ]
    then
        # TODO: this doesn't delete
        # all (parent) folders it creates
        rm -r "${path_to_secrets}"
    fi

    echo
    echo "container image ${image_name} complete"
    echo
done


if ! popd > /dev/null
then
    echo "Failed to popd from target project root ${path_to_target_root}"
    exit 1
fi


echo 'Docker container images build complete'
echo
