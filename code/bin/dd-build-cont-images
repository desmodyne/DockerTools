#!/usr/bin/env bash

# dd-build-cont-images
#
# build Docker container images defined by only a Dockerfile
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2017-05-26


# NOTE: see also dd-build-cont-comps


echo
echo 'build Docker container images'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('docker' 'jq' 'realpath' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if ! output="$(source "${path_to_bashlib}" 2>&1)"
then
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
source "${path_to_bashlib}"


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

echo -n 'Load script configuration file: '
# shellcheck disable=SC2154
if output="$(yq read "${conf_file}" --tojson 2>&1)"
then
    echo 'OK'
    config="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Extract mandatory script configuration attributes: '
for attr in images local_namespace path_to_proj_root
do
    output="$(jq -r ".${attr}" <<< "${config}")"
    # https://unix.stackexchange.com/a/68349
    # https://unix.stackexchange.com/a/41418
    if [ -n "${output}" ] && [ "${output}" != 'null' ]
    then
        declare "${attr}"="${output}"
    else
        echo 'ERROR'
        echo "Failed to get ${attr} attribute from configuration"
        exit 1
    fi
done
echo 'OK'

echo -n 'Extract optional script configuration attributes: '
# NOTE: for now, set conf attributes to '' if not found
# so check if set later in this script can be done with -n
# TODO: set / unset / null vars in bash:
# https://stackoverflow.com/a/16753536
# TODO: remove as soon as there is more than one item
# shellcheck disable=SC2043
for attr in path_to_secrets
do
    output="$(jq -r ".${attr}" <<< "${config}")"
    if [ -n "${output}" ] && [ "${output}" != 'null' ]
    then
        declare "${attr}"="${output}"
    else
        declare "${attr}"=''
    fi
done
echo 'OK'


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# path to folder that contains configuration file
if ! path_to_conf_folder="$(dirname "${conf_file}")"
then
    exit 1
fi

# absolute, canonical path to target project root
# shellcheck disable=SC2154
path_to_target_root="$(realpath "${path_to_conf_folder}/${path_to_proj_root}")"

# absolute, canonical path to secrets folder in TARGET project
# NOTE: not using realpath as this folder usually doesn't exist yet
# do this only if target project has secret files;
# testing this in addition to testing secrets_files below
if [ -n "${path_to_secrets}" ]
then
    path_to_secrets="${path_to_target_root}/${path_to_secrets}"
fi


# -----------------------------------------------------------------------------
# build Docker container images


if ! pushd "${path_to_target_root}" > /dev/null
then
    echo "Failed to pushd to target project root ${path_to_target_root}"
    exit 1
fi


echo

if [ -n "${path_to_secrets}" ]
then
    if [ ! -d "${path_to_secrets}" ]
    then
        mkdir -p "${path_to_secrets}"
    fi
fi

# shellcheck disable=SC2154
if ! image_names="$(jq -r 'keys[]' <<< "${images}" | sort)"
then
    exit 1
fi

for image_name in ${image_names}
do
    echo "container image name: ${image_name}"
    echo

    if ! image_conf="$(jq -r ".\"${image_name}\"" <<< "${images}")"
    then
        exit 1
    fi

    echo -n 'Extract mandatory attributes from image configuration: '
    for attr in image_conf_path image_tag_stage image_tag_second
    do
        output="$(jq -r ".${attr}" <<< "${image_conf}")"
        # https://unix.stackexchange.com/a/68349
        # https://unix.stackexchange.com/a/41418
        if [ -n "${output}" ] && [ "${output}" != 'null' ]
        then
            declare "${attr}"="${output}"
        else
            echo 'ERROR'
            echo "Failed to get ${attr} attribute from image configuration"
            exit 1
        fi
    done
    echo 'OK'

    echo -n 'Extract optional attributes from image configuration: '
    # NOTE: for now, set conf attributes to '' if not found
    # so check if set later in this script can be done with -n
    # TODO: set / unset / null vars in bash:
    # https://stackoverflow.com/a/16753536
    # TODO: support more than one build arg
    for attr in build_arg secrets_files
    do
        output="$(jq -r ".${attr}" <<< "${image_conf}")"
        if [ -n "${output}" ] && [ "${output}" != 'null' ]
        then
            declare "${attr}"="${output}"
        else
            declare "${attr}"=''
        fi
    done
    echo 'OK'

    declare -a docker_args

    # TODO: remove as soon as there is more than one item
    # shellcheck disable=SC2043
    for attr in build_arg
    do
        if [ -n "${!attr}" ]
        then
            # TODO: use switch / case
            if   [ "${attr}" = build_arg ]
            then
                # NOTE: --build-arg, but ${build_arg}
                docker_args+=('--build-arg' "${build_arg}")
            fi
        fi
    done

    if [ -n "${path_to_secrets}" ] && [ -n "${secrets_files}" ]
    then
        # TODO: use array instead of setting IFS
        echo "Copy files with secrets to ${path_to_secrets}:"
        secrets_files="$(jq -r '.[]' <<< "${secrets_files}")"
        OLD_IFS="${IFS}" && IFS=$'\n'
        for secrets_file in ${secrets_files}
        do
            echo -n "  ${secrets_file}: "
            if output="$(cp "${secrets_file}" "${path_to_secrets}/" 2>&1)"
            then
                echo 'OK'
            else
                echo 'ERROR'
                echo "  ${output}"
                exit 1
            fi
        done
        IFS="${OLD_IFS}"
    fi

    if [ ! -f "${image_conf_path}" ]
    then
        # NOTE: not using realpath as it always fails with
        #   realpath: <image_conf_path>: No such file or directory
        echo 'Failed to find container image configuration file at'
        echo "  $("${image_conf_path}")"
        exit 1
    fi

    # shellcheck disable=SC2154
    image_path="${local_namespace}/${image_name}"

    # NOTE: useful during development and debugging
    msg="full 'docker build' command line:"$'\n'
    msg+="  docker build ${docker_args[*]}"
    msg+=" --file ${image_conf_path}"
    msg+=" --tag ${image_path}:${image_tag_stage}"
    msg+=" --tag ${image_path}:${image_tag_second}"
    msg+=" $(pwd)"
    echo "${msg}"

    echo "Build ${image_name} with"
    echo "  $(realpath "${image_conf_path}"):"
    echo

    # NOTE: tagging the image when building is simpler than separate steps
    if ! docker build "${docker_args[@]}"                           \
                      --file "${image_conf_path}"                   \
                      --tag  "${image_path}:${image_tag_stage}"     \
                      --tag  "${image_path}:${image_tag_second}"    \
                      "$(pwd)"
    then
        exit 1
    fi

    if [ -n "${path_to_secrets}" ]
    then
        # TODO: this doesn't delete
        # all (parent) folders it creates
        rm -r "${path_to_secrets}"
    fi

    echo
    echo "container image ${image_name} complete"
    echo
done


if ! popd > /dev/null
then
    echo "Failed to popd from target project root ${path_to_target_root}"
    exit 1
fi


echo 'Docker container images build complete'
echo
