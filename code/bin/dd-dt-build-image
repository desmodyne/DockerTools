#!/usr/bin/env bash

# dd-dt-build-image
#
# build a Docker container image
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2017-05-26


# NOTE: see also dd-dt-build-cont-comps


echo
echo 'build a Docker container image'
echo


# -----------------------------------------------------------------------------
# define functions: http://stackoverflow.com/a/6212408

function check_vault_response
{
    # NOTE: see also VaultTools > dd-vt-vault.lib > check_response

    if [ $# -ne 1 ]
    then
        # get function name: https://stackoverflow.com/a/1835958
        echo "Usage: ${FUNCNAME[0]} <vault response>" 2>&1
        return 1
    fi

    # TODO: validate arguments

    # response from vault instance
    response="${1}"

    if [ -z "${response}" ]
    then
        return 0
    fi

    jq_err='if   .errors   and (.errors   | length) > 0 then .errors[] '`
          `'elif .warnings and (.warnings | length) > 0 then .warnings[] '`
          `'else empty end'

    err_resp="$(jq -r "${jq_err}" <<< "${response}")"

    if [ -z "${err_resp}" ]
    then
        return 0
    else
        echo "${err_resp}" 2>&1
        return 1
    fi
}


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('curl' 'docker' 'jo' 'jq' 'realpath')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()

# arguments for every curl call
# http://stackoverflow.com/a/21109454
curl_args=('--show-error' '--silent')


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

# TODO: introduce convention on conf attrs being not set: if a conf file sets
# an attr to 'null', BashLib > get_attrs_from_yaml_file should set it to empty
# or undefine it or whatever, so check if set in here can be done with -n
# TODO: set / unset / null vars in bash: https://stackoverflow.com/a/16753536

# shellcheck disable=SC2034
attrs=(image_conf_path image_name image_tag local_namespace path_to_client_root)
# shellcheck disable=SC2034
opt_attrs=(build_arg vault)

echo 'Load script configuration file:'
# shellcheck disable=SC2154
if ! get_attrs_from_yaml_file "${conf_file}" attrs opt_attrs; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters

# path to folder that contains configuration file
path_to_conf_folder="$(dirname "${conf_file}")"

# absolute, canonical path to target project root
# TODO: (globally) rename target root to client root
# shellcheck disable=SC2154
path_to_target_root="$(realpath "${path_to_conf_folder}/${path_to_client_root}")"


# -----------------------------------------------------------------------------
# get secrets required to build Docker container image from vault

# shellcheck disable=SC2154
if [ -n "${vault}" ]
then
    path_to_secrets="$(jq -r '.path_to_secrets' <<< "${vault}")"
    role_id="$(        jq -r '.role_id'         <<< "${vault}")"
    secret_id="$(      jq -r '.secret_id'       <<< "${vault}")"
    vault_host="$(     jq -r '.vault_host'      <<< "${vault}")"
    vault_root="$(     jq -r '.vault_root'      <<< "${vault}")"
    vault_paths="$(    jq    '.vault_paths'     <<< "${vault}")"

    # url path to log into vault using role + secret ID, relative to vault_root:
    # https://learn.hashicorp.com/vault/identity-access-management/ ...
    #  ... approle#step-4-login-with-roleid-secretid
    url_path='v1/auth/approle/login'

    full_url="${vault_host}/${url_path}"
    req_data="$(jo role_id="${role_id}" secret_id="${secret_id}")"

    # NOTE: useful during development and debugging
    # TODO: if using this, redact any sensitive data;
    # for example, this exposes vault credentials in log output
    # echo
    # echo 'full curl command line:'
    # echo "curl --data ${req_data} --request POST ${curl_args[*]} ${full_url}"
    echo -n 'log into vault: '
    if output="$(curl --data "${req_data}" \
                      --request POST "${curl_args[@]}" "${full_url}" 2>&1)"
    then
        if err_resp="$(check_vault_response "${output}" 2>&1)"
        then
            echo 'OK'
            json_response="${output}"
        else
            echo 'ERROR'
            echo "${err_resp}"
            exit 1
        fi
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi

    # TODO: why is this token an orphan ?

    # echo 'json_response:'
    # jq '.' <<< "${json_response}"
    # sample output:
    # json_response:
    # {
    #   "request_id": "f1e019fd-a306-730e-cb9b-fda8f3a7a400",
    #   "lease_id": "",
    #   "renewable": false,
    #   "lease_duration": 0,
    #   "data": null,
    #   "wrap_info": null,
    #   "warnings": null,
    #   "auth": {
    #     "client_token": "<not shown here>",
    #     "accessor": "<not shown here>",
    #     "policies": [
    #       "projects/mailflow/database/feature/builder"
    #     ],
    #     "token_policies": [
    #       "projects/mailflow/database/feature/builder"
    #     ],
    #     "metadata": {
    #       "role_name": "projects_mailflow_database_feature_builder"
    #     },
    #     "lease_duration": 2764800,
    #     "renewable": true,
    #     "entity_id": "e9976020-98e0-e6a9-76f9-31f902b912db",
    #     "token_type": "service",
    #     "orphan": true
    #   }
    # }

    echo -n 'extract token from response: '
    if output="$(jq -r '.auth.client_token' <<< "${json_response}" 2>&1)"
    then
        vault_token="${output}"
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi

    # TODO: introduce some convention on this at last
    if [ -z "${vault_paths}" ] || [ "${vault_paths}" = 'null' ]
    then
        vault_paths=()
    else
        header_value="X-Vault-Token: ${vault_token}"
        curl_args+=("--header" "${header_value}")

        echo "Fetch secrets from vault at ${vault_host}/${vault_root}:"

        mapfile -t vault_paths < <(jq -r '.[]' <<< "${vault_paths}")
    fi

    for vault_path in "${vault_paths[@]}"
    do
        echo "  ${vault_path}:"

        # shellcheck disable=SC2154
        full_url="${vault_host}/${vault_root}/${vault_path}"

        echo -n '    get secret from vault: '
        if output="$(curl --request GET "${curl_args[@]}" "${full_url}" 2>&1)"
        then
            if err_resp="$(check_vault_response "${output}" 2>&1)"
            then
                echo 'OK'
                json_response="${output}"
            else
                echo 'ERROR'
                echo "    ${err_resp}"
                exit 1
            fi
        else
            echo 'ERROR'
            echo "    ${output}"
            exit 1
        fi

        # echo 'json_response:'
        # jq '.' <<< "${json_response}"
        # sample output:
        # json_response:
        # {
        #   "request_id": "925051f3-f631-d90f-7883-17ef95a057e0",
        #   "lease_id": "",
        #   "renewable": false,
        #   "lease_duration": 0,
        #   "data": {
        #     "data": {
        #       "database_admin_password": "<not shown here>",
        #       "database_admin_username": "<not shown here>"
        #     },
        #     "metadata": {
        #       "created_time": "2020-06-26T21:57:18.167202575Z",
        #       "deletion_time": "",
        #       "destroyed": false,
        #       "version": 6
        #     }
        #   },
        #   "wrap_info": null,
        #   "warnings": null,
        #   "auth": null
        # }

        # NOTE: .data.data properties are typically different for every path

        # TODO: .data.data ?!? SERIOUSLY ?!?
        echo -n '    extract secrets data from response: '
        output="$(jq '.data.data' <<< "${json_response}")"
        if [ "${output}" != 'null' ]
        then
            secrets_json="${output}"
            echo 'OK'
        else
            echo 'ERROR'
            echo "    ${output}"
            exit 1
        fi

        # echo 'secrets_json:'
        # jq '.' <<< "${secrets_json}"
        # sample output:
        # secrets_json:
        # {
        #   "database_user_password": "<not shown here>",
        #   "database_user_username": "<not shown here>"
        # }

        # TODO: vault_paths is not a good property name; those are not actually
        # vault paths, but titles for secrets grouped together in one yaml file
        # in the local sec loc or at one <vault root>/<vault path> in Vault;
        # conf example from Projects > MailFlow > Database > feature:
        #   # path into vault where secrets are stored, relative to vault_host
        #   vault_root: v1/kv-v2/data/Projects/MailFlow/Database/feature
        #   # vault path for secrets, relative to vault_host/vault_root
        #   vault_paths:
        #   - database-admin-credentials
        #   - database-reader-credentials
        #   - database-root-credentials
        #   - database-user-credentials
        # so the conf might be partitioned and named suboptimally, but at least
        # this prevents (to a certain extent) that two vault_paths with the
        # same name are configured - which would cause the first temp file here
        # to be overwritten by a second (with the same name)

        # store group of secrets, e.g.
        #   database_user_username, database_user_password
        # in a temp folder underneath the client's project space root, e.g.
        #   ~/DevBase/DesmoDyne/Projects/MailFlow/Database/ ...
        #      ... tmp/build/ci-mailflow-database_dev/secrets/
        # in a json temp file named after the vault path, e.g.
        #   database-admin-credentials.json
        # use json so those secrets can easily be consumed using e.g. jq

        secrets_filename="${vault_path}.json"

        # absolute, canonical path to secrets folder in client project
        # NOTE: path_to_secrets will be re-used to build container
        path_to_secrets_="${path_to_target_root}/${path_to_secrets}"

        # NOTE: not creating the output folder; that is the client's job
        # NOTE: using jq to pretty-print json, helps during development
        echo -n "    save secrets data to temp file: "
        if output="$(jq '.' <<< "${secrets_json}" \
                      > "${path_to_secrets_}/${secrets_filename}" 2>&1)"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "    ${output}"
            exit 1
        fi
    done
fi


# -----------------------------------------------------------------------------
# build Docker container image

echo
echo 'build Docker container image:'
echo


if ! pushd "${path_to_target_root}" > /dev/null
then
    echo "Failed to pushd to target project root ${path_to_target_root}"
    exit 1
fi


# shellcheck disable=SC2154
if [ ! -f "${image_conf_path}" ]
then
    # NOTE: not using realpath as it always fails with
    #   realpath: <image_conf_path>: No such file or directory
    echo 'Failed to find container image configuration file at'
    echo "  $("${image_conf_path}")"
    exit 1
fi

# NOTE: =() is required to clear the array
# when this loop is run the second time
declare -a docker_args=()

# if a vault conf was passed, Docker build
# needs to know where the secrets files are
if [ -n "${vault}" ]
then
    docker_args+=('--build-arg' "PATH_TO_SECRETS=${path_to_secrets}")
fi

# TODO: remove as soon as there is more than one item
# shellcheck disable=SC2043
for attr in build_arg
do
    if [ -n "${!attr}" ]
    then
        # TODO: use switch / case
        if   [ "${attr}" = build_arg ]
        then
            # NOTE: --build-arg, but ${build_arg}
            docker_args+=('--build-arg' "${build_arg}")
        fi
    fi
done

# do not add latest tag when building build images
# https://stackoverflow.com/a/2172367
if [[ "${image_tag}" == *-build ]]
then
    # NOTE: useful during development and debugging
    echo "full 'docker build' command line:"$'\n'`
        `"  docker build ${docker_args[*]}"`
        `" --file ${image_conf_path}"`
        `" --tag ${local_namespace}/${image_name}:${image_tag}"`
        `" $(pwd)"

    echo
    echo "Build ${image_name} with"
    echo "  $(realpath "${image_conf_path}"):"
    echo

    # NOTE: tagging the image when building is simpler than separate steps
    if ! docker build "${docker_args[@]}"                                    \
                      --file "${image_conf_path}"                            \
                      --tag  "${local_namespace}/${image_name}:${image_tag}" \
                      "$(pwd)"
    then
        exit 1
    fi

else
    # get stage from image tag
    # https://wiki-dev.bash-hackers.org/syntax/pe#from_the_end
    stage="${image_tag%-*}"

    # create latest image tag
    latest_tag="${stage}-latest"

    # NOTE: useful during development and debugging
    echo "full 'docker build' command line:"$'\n'`
        `"  docker build ${docker_args[*]}"`
        `" --file ${image_conf_path}"`
        `" --tag ${local_namespace}/${image_name}:${image_tag}"`
        `" --tag ${local_namespace}/${image_name}:${latest_tag}"`
        `" $(pwd)"

    echo
    echo "Build ${image_name} with"
    echo "  $(realpath "${image_conf_path}"):"
    echo

    # NOTE: tagging the image when building is simpler than separate steps
    if ! docker build "${docker_args[@]}"                                     \
                      --file "${image_conf_path}"                             \
                      --tag  "${local_namespace}/${image_name}:${image_tag}"  \
                      --tag  "${local_namespace}/${image_name}:${latest_tag}" \
                      "$(pwd)"
    then
        exit 1
    fi
fi


if ! popd > /dev/null
then
    echo "Failed to popd from target project root ${path_to_target_root}"
    exit 1
fi


echo
echo 'Docker container image build complete'
