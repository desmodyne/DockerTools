#!/usr/bin/env bash

# dd-dt-run-remote
#
# shell wrapper script for dd-dt-run-remote.py
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2019-09-24


echo
echo 'run scripts on remote host'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to this script: http://stackoverflow.com/a/9107028
here="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('pipenv' 'realpath')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# configure script parameters

# string to mark the line before relevant output on stdout
# shellcheck disable=SC2154
marker_start="${dd_bashlib_marker_start}"

# string to mark the line after relevant output on stdout
# shellcheck disable=SC2154
marker_end="${dd_bashlib_marker_end}"


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi

echo -n 'Get DockerTools environment: '
if output="$(get_environment "${here}" 2>&1)"
then
    echo 'OK'
    env_json="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# NOTE: see also BashLib > get_environment function documentation
sedex="/${marker_start}/,/${marker_end}/!d;/${marker_end}/q"
env_json="$(sed "${sedex}" <<< "${env_json}" 2>&1)"
env_json="$(sed '1d;$d'    <<< "${env_json}" 2>&1)"


# -----------------------------------------------------------------------------
# configure script parameters

environment="$(jq -r '.environment' <<< "${env_json}")"

if [ "${environment}" != 'development' ] && [ "${environment}" != 'production' ]
then
    echo 'failed to determine DockerTools environment'
    exit 1
fi

if [ "${environment}" = 'development' ]
then
    # path to python root folder in development, relative to project root
    path_to_python_root='code/python'

    # path from this script to project root
    path_to_proj_root='../..'

    # absolute, canonical path to project root
    path_to_proj_root="$(realpath "${here}/${path_to_proj_root}")"

    # absolute path to python root folder
    path_to_python_root="${path_to_proj_root}/${path_to_python_root}"
fi


# -----------------------------------------------------------------------------
# run dd-dt-run-remote.py

# TODO: run python dd-dt-run-remote.py ?

if   [ "${environment}" = 'development' ]
then
    pushd "${path_to_python_root}" > /dev/null || exit 1

    pipenv run ./dd-dt-run-remote.py "${conf_file}"
    exit_code=$?

    popd > /dev/null || exit 1

else
    dd-dt-run-remote.py "${conf_file}"
    exit_code=$?
fi


echo 'running scripts on remote host complete'
echo


exit "${exit_code}"
