#!/usr/bin/env bash

# dd-upload-cont-images-to-gitlab
#
# upload Docker container images to gitlab registry
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2019-01-20


# https://gitlab.com/help/user/project/container_registry
# NOTE: see also dd-download-cont-images-from-gitlab


echo
echo 'upload Docker container images to gitlab registry'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('docker' 'jq' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

attrs=(gitlab_namespace gitlab_reg_url images local_namespace)
opt_attrs=()

echo 'Load script configuration file:'
if ! get_attrs_from_yaml_file "${conf_file}" attrs opt_attrs; then exit 1; fi


# -----------------------------------------------------------------------------
# upload Docker container images to gitlab registry

echo

docker_args=()

# https://stackoverflow.com/a/43874529
if [ -n "${CI_JOB_TOKEN}" ] && [ -n "${CI_REGISTRY}" ]
then
    # TODO: gitlab_reg_url is also available as ${CI_REGISTRY}
    echo 'running in CI/CD context, using CI_* environment variables'
    docker_args+=('--username' 'gitlab-ci-token' '--password' "${CI_JOB_TOKEN}")
fi

# TODO: on gitlab CI/CD, this prints a warning
# WARNING! Using --password via the CLI is insecure. Use --password-stdin.
# WARNING! Your password will be stored unencrypted in ...
#  ... /home/gitlab-runner/.docker/config.json.
# Configure a credential helper to remove this warning. See
# https://docs.docker.com/engine/reference/commandline/login/#credentials-store

echo -n 'Log into gitlab Docker repository: '
if output="$(docker login "${docker_args[@]}" "${gitlab_reg_url}" 2>&1)"
then
    echo 'OK'

    if [ -n "${output}" ]
    then
        echo "${output}"
        echo
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi


if ! image_names="$(jq -r 'keys[]' <<< "${image_confs}" | sort)"
then
    exit 1
fi

for image_name in ${image_names}
do
    echo
    echo "container image name: ${image_name}"
    echo

    if ! image_conf="$(jq -r ".\"${image_name}\"" <<< "${image_confs}")"
    then
        exit 1
    fi

    if ! image_tag_stage="$( jq -r '.image_tag_stage'  <<< "${image_conf}")"
    then
        exit 1
    fi

    if ! image_tag_second="$(jq -r '.image_tag_second' <<< "${image_conf}")"
    then
        exit 1
    fi

    repo_uri="${gitlab_reg_url}/${gitlab_namespace}/${image_name}"

    for image_tag in "${image_tag_second}" "${image_tag_stage}"
    do
        repo_tag="${repo_uri}:${image_tag}"
        local_tag="${local_namespace}/${image_name}:${image_tag}"

        echo -n 'Tag Docker container image with repository info: '
        if output="$(docker tag "${local_tag}" "${repo_tag}" 2>&1)"
        then
            echo 'OK'
            echo
        else
            echo 'ERROR'
            echo "${output}"
            exit 1
        fi

        echo 'Push Docker container image to repository:'
        if ! docker push "${repo_tag}"
        then
            exit 1
        fi

        echo
        echo 'Remove repository info tag from Docker container:'
        if ! docker rmi "${repo_tag}"
        then
            exit 1
        fi
    done

    echo
    echo "container image ${image_name} upload complete"
    echo
done


echo 'Docker container image upload to gitlab registry complete'
echo
