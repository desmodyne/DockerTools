#!/usr/bin/env bash

# dd-download-cont-images-from-gitlab
#
# download Docker container images from gitlab registry
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2019-02-14


# https://gitlab.com/help/user/project/container_registry
# NOTE: see also dd-build-cont-comps


echo
echo 'download Docker container images from gitlab registry'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('docker' 'jq' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if ! output="$(source "${path_to_bashlib}" 2>&1)"
then
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
source "${path_to_bashlib}"


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# shellcheck disable=SC2154
conf="$(yq r -j "${conf_file}")"

gitlab_namespace="$(jq -r '.gitlab_namespace'  <<< "${conf}")"
gitlab_reg_url="$(  jq -r '.gitlab_reg_url'    <<< "${conf}")"
image_confs="$(     jq -r '.images'            <<< "${conf}")"
local_namespace="$( jq -r '.local_namespace'   <<< "${conf}")"

# TODO: get these from elsewhere
gitlab_username="$( jq -r '.gitlab_username'   <<< "${conf}")"
gitlab_password="$( jq -r '.gitlab_password'   <<< "${conf}")"


# -----------------------------------------------------------------------------
# download Docker container images from gitlab registry

echo

# https://docs.docker.com/engine/reference/commandline/login

# TODO: this only works if macOS Keychain contains credentials
# TODO: review warnings:
# WARNING! Using --password via the CLI is insecure. Use --password-stdin.
# WARNING! Your password will be stored unencrypted ...
#  ... in /home/ansible/.docker/config.json.
# Configure a credential helper to remove this warning. See
# https://docs.docker.com/engine/reference/commandline/login/#credentials-store
echo -n 'Log into gitlab Docker repository: '
if output="$(docker login --username "${gitlab_username}" \
                          --password "${gitlab_password}" \
                                     "${gitlab_reg_url}" 2>&1)"
then
    echo 'OK'

    if [ -n "${output}" ]
    then
        echo "${output}"
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

# NOTE: on AWS, the container registry is structured globally per AWS account
# as a list of repositories and a repository must be created for every image;
# on gitlab, the container registry is structured per project and one
# repository exists per project; not need to create it to upload and image

if ! image_names="$(jq -r 'keys[]' <<< "${image_confs}" | sort)"
then
    exit 1
fi

for image_name in ${image_names}
do
    echo
    echo "container image name: ${image_name}"
    echo

    if ! image_conf="$(jq -r ".\"${image_name}\"" <<< "${image_confs}")"
    then
        exit 1
    fi

    if ! image_tag_second="$(jq -r '.image_tag_second' <<< "${image_conf}")"
    then
        exit 1
    fi

    if ! image_tag_stage="$( jq -r '.image_tag_stage'  <<< "${image_conf}")"
    then
        exit 1
    fi

    image_tag="${image_tag_second}"

    # TODO: use stage instead of second tag ?
    # image_tag="${image_tag_stage}"

    repo_uri="${gitlab_reg_url}/${gitlab_namespace}/${image_name}"
    repo_tag="${repo_uri}:${image_tag}"
    local_tag="${local_namespace}/${image_name}:${image_tag}"

    echo "pull ${repo_tag}:"
    if ! docker pull "${repo_tag}"
    then
        exit 1
    fi

    echo
    echo -n 'Create Docker container image non-repository tag: '
    if output="$(docker tag "${repo_tag}" "${local_tag}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi

    echo -n 'Delete Docker container image with repository tag: '
    if output="$(docker rmi "${repo_tag}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi

    echo
    echo "container image ${image_name} download complete"
    echo
done


echo 'Docker container image download from gitlab registry complete'
echo
