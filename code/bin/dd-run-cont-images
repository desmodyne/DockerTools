#!/usr/bin/env bash

# dd-run-cont-images
#
# run Docker container images
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2019-01-24


# NOTE: see also dd-build-cont-comps


echo
echo 'run Docker container images'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('docker' 'jq' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if ! output="$(source "${path_to_bashlib}" 2>&1)"
then
    echo "${output}"
    exit 1
fi

# shellcheck disable=SC1090
source "${path_to_bashlib}"


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# shellcheck disable=SC2154
conf="$(yq r -j "${conf_file}")"

image_confs="$(    jq -r '.images'          <<< "${conf}")"
local_namespace="$(jq -r '.local_namespace' <<< "${conf}")"


# -----------------------------------------------------------------------------
# run Docker container images

if ! image_names="$(jq -r 'keys[]' <<< "${image_confs}" | sort)"
then
    exit 1
fi

# TODO: use arrays, not strings for running_conts and stopped_conts
# TODO: possible container statuses:
# created, restarting, running, removing, paused, exited, or dead
# https://docs.docker.com/engine/reference/commandline/ps/#filtering

echo
echo -n 'Get list of running containers: '
if output="$(docker ps --filter status=running --format '{{.Names}}' 2>&1)"
then
    echo 'OK'
    running_conts="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Get list of stopped containers: '
# NOTE: multiple filter statements are ORed, not ANDed
if output="$(docker ps --filter status=exited   \
                       --filter status=created  \
                       --format '{{.Names}}' 2>&1)"
then
    echo 'OK'
    stopped_conts="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

for image_name in ${image_names}
do
    echo
    echo "container image name: ${image_name}"
    echo

    if ! image_conf="$(jq -r ".\"${image_name}\"" <<< "${image_confs}")"
    then
        exit 1
    fi

    echo -n 'Extract image properties from configuration: '
    for attr in cont_caps cont_name cont_ports image_tag network_name volumes
    do
        # https://unix.stackexchange.com/a/68349
        if ! output="$(jq -r ".${attr}" <<< "${image_conf}")"
        then
            echo 'ERROR'
            echo "${output}"
            exit 1
        fi

        # TODO: distinguish between mandatory and optional attributes
        declare "${attr}"="${output}"

        # https://unix.stackexchange.com/a/41418
        # if [ -z "${!attr}" ] || [ "${!attr}" = 'null' ]
        # then
        #     echo 'ERROR'
        #     echo "failed to get ${attr} attribute from configuration"
        #     exit 1
        # fi
    done
    echo 'OK'

    # check if a container with that name is running
    # NOTE: the usual simple approach fails for e.g. ci-postgres
    # if they are part of another URI, e.g. ci-postgres-sonarqube
    # https://stackoverflow.com/a/229606

    cont_exists=false

    for running_cont in ${running_conts}
    do
        # shellcheck disable=SC2154
        if [ "${running_cont}" = "${cont_name}" ]
        then
            cont_exists=true
            break
        fi
    done

    if [ "${cont_exists}" = true ]
    then
        echo -n 'Stop running container: '
        if output="$(docker stop "${cont_name}" 2>&1)"
        then
            echo 'OK'
            # TODO: separation char ? newline ? space ?
            stopped_conts+=" ${cont_name}"
        else
            echo 'ERROR'
            echo "${output}"
            exit 1
        fi
    fi

    # check if a container with that name exists
    # TODO: other states than running or exited ?

    cont_exists=false

    for stopped_cont in ${stopped_conts}
    do
        if [ "${stopped_cont}" = "${cont_name}" ]
        then
            cont_exists=true
            break
        fi
    done

    if [ "${cont_exists}" = true ]
    then
        echo -n 'Remove existing container: '
        if output="$(docker rm "${cont_name}" 2>&1)"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "${output}"
            exit 1
        fi
    fi

    declare -a docker_args=('--detach')

    for attr in cont_caps cont_name cont_ports network_name
    do
        if [ -n "${!attr}" ] && [ "${!attr}" != 'null' ]
        then
            if   [ "${attr}" = cont_caps ]
            then
                docker_args+=('--cap-add' "${cont_caps}")
            elif [ "${attr}" = cont_name ]
            then
                docker_args+=('--name'    "${cont_name}")
            elif [ "${attr}" = cont_ports ]
            then
                docker_args+=('--publish' "${cont_ports}")
            elif [ "${attr}" = network_name ]
            then
                docker_args+=('--network' "${network_name}")
            fi
        fi
    done

    # https://starkandwayne.com/blog/bash-for-loop-over-json-array-using-jq
    # https://docs.docker.com/v17.12/edge/engine/reference/commandline/ ...
    #  ... run/#add-bind-mounts-or-volumes-using-the-mount-flag
    # https://docs.docker.com/v17.12/edge/engine/reference/commandline/ ...
    #  ... service_create/#add-bind-mounts-volumes-or-memory-filesystems
    if [ "${volumes}" != 'null' ]
    then
        for line in $(jq -cr '.[] | @base64' <<< "${volumes}")
        do
            vol_conf="$(base64 --decode <<< "${line}")"
            source="$(jq -r '.source' <<< "${vol_conf}")"
            target="$(jq -r '.target' <<< "${vol_conf}")"
            mount_arg="type=volume,source=${source},target=${target}"
            docker_args+=('--mount' "${mount_arg}")
        done
    fi

    # shellcheck disable=SC2154
    local_tag="${local_namespace}/${image_name}:${image_tag}"

    # NOTE: useful during development and debugging
    echo "full 'docker run' command line:"
    echo "  docker run ${docker_args[*]} ${local_tag}"

    # NOTE: can not prepend namespace to container name:
    #   ... only [a-zA-Z0-9][a-zA-Z0-9_.-] are allowed.
    echo -n 'Run container: '
    if output="$(docker run "${docker_args[@]}" "${local_tag}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi

    echo
    echo "container image ${image_name} complete"
    echo
done


echo 'Docker container image run complete'
echo
