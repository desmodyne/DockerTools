#!/usr/bin/env bash

# dd-upload-cont-comps-to-aws
#
# upload Docker container composition images to AWS registry
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2018-12-22


# NOTE: see dd-download-cont-comps-from-aws


echo
echo 'upload Docker container composition images to AWS registry'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('aws' 'docker' 'docker-compose' 'jq' 'realpath' 'yq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    # shellcheck disable=SC1090
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

# shellcheck disable=SC2154
conf="$(yq r -j "${conf_file}")"

aws_def_region="$( jq -r '.aws_def_region'    <<< "${conf}")"
# TODO: use this
# shellcheck disable=SC2034
aws_namespace="$(  jq -r '.aws_namespace'     <<< "${conf}")"
aws_profile="$(    jq -r '.aws_profile'       <<< "${conf}")"
aws_reg_url="$(    jq -r '.aws_reg_url'       <<< "${conf}")"
comp_confs="$(     jq -r '.compositions'      <<< "${conf}")"
cont_namespace="$( jq -r '.cont_namespace'    <<< "${conf}")"
rel_target_root="$(jq -r '.path_to_proj_root' <<< "${conf}")"


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# command shortcut for shorter code
aws="aws --profile ${aws_profile}"

# path to folder that contains configuration file
if ! path_to_conf_folder="$(dirname "${conf_file}")"
then
    exit 1
fi

# absolute, canonical path to TARGET project root
path_to_target_root="$(realpath "${path_to_conf_folder}/${rel_target_root}")"


# -----------------------------------------------------------------------------
# upload container images to AWS registry


if ! pushd "${path_to_target_root}" > /dev/null
then
    echo "Failed to pushd to target project root ${path_to_target_root}"
    exit 1
fi


echo

echo -n 'Log into AWS: '
if output="$(${aws} ecr get-login --no-include-email \
                                  --region "${aws_def_region}" 2>&1)"
then
    echo 'OK'
    login_command="${output}"
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Log into AWS Docker repository: '
if output="$(${login_command} 2>&1)"
then
    echo 'OK'

    if [ -n "${output}" ]
    then
        echo "${output}"
        echo
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo -n 'Get existing container image repositories: '
if output="$(${aws} ecr describe-repositories 2>&1)"
then
    echo 'OK'
    repo_json="${output}"
    echo
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

if ! existing_repo_uris="$(jq -r '.repositories[].repositoryUri' \
                             <<< "${repo_json}")"
then
    exit 1
fi

if ! comp_names="$(jq -r 'keys[]' <<< "${comp_confs}" | sort)"
then
    exit 1
fi


for comp_name in ${comp_names}
do
    echo "container composition name: ${comp_name}"
    echo

    if ! comp_conf="$(jq -r ".\"${comp_name}\"" <<< "${comp_confs}")"
    then
        exit 1
    fi

    if ! comp_conf_path="$(jq -r '.comp_conf_path' <<< "${comp_conf}")"
    then
        exit 1
    fi

    if [ ! -f "${comp_conf_path}" ]
    then
        echo 'Failed to find container composition configuration file at'
        echo "  $(realpath "${comp_conf_path}")"
        exit 1
    fi

    echo -n 'Get container composition image names: '
    if output="$(docker-compose --file "${comp_conf_path}" config \
                   | yq r -j - \
                   | jq -r '.services | to_entries[] | .value.image' 2>&1)"
    then
        echo 'OK'
        image_names="${output}"
        echo
    else
        echo 'ERROR'
        echo "${output}"
        exit 1
    fi


    for image_name in ${image_names}
    do
        echo "container image name: ${image_name}"
        echo

        # https://stackoverflow.com/a/2172367
        if [[ "${image_name}" != "${cont_namespace}"/* ]]
        then
            echo 'Container image namespace does not match; skip';
            echo
            continue
        fi

        # TODO: aws_namespace ?
        repo_uri="${aws_reg_url}/${image_name}"

        repo_exists=false

        for existing_repo_uri in ${existing_repo_uris}
        do
            if [ "${existing_repo_uri}" = "${repo_uri}" ]
            then
                repo_exists=true
                break
            fi
        done

        if [ "${repo_exists}" = false ]
        then
            echo -n 'Create container image repository: '
            # TODO: aws_namespace ?
            if output="$(${aws} ecr create-repository \
                          --repository-name "${image_name}" 2>&1)"
            then
                echo 'OK'
                echo
            else
                echo 'ERROR'
                echo "${output}"
                exit 1
            fi
        fi

        # TODO: introduce image versioning
        repo_tag="${repo_uri}"

        echo -n 'Tag Docker container image with repository info: '
        if output="$(docker tag "${image_name}" "${repo_tag}" 2>&1)"
        then
            echo 'OK'
            echo
        else
            echo 'ERROR'
            echo "${output}"
            exit 1
        fi

        echo 'Push Docker container image to repository:'
        if ! docker push "${repo_tag}"
        then
            exit 1
        fi

        echo
        echo 'Remove repository info tag from Docker container:'
        if ! docker rmi "${repo_tag}"
        then
            exit 1
        fi

        echo
        echo "container image ${image_name} upload complete"
        echo
    done

    echo "container composition ${comp_name} upload complete"
    echo
done


if ! popd > /dev/null
then
    echo "Failed to popd from project root ${path_to_target_root}"
    exit
fi


echo 'Docker container composition image upload to AWS registry complete'
echo
