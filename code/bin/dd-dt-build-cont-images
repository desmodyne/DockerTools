#!/usr/bin/env bash

# dd-dt-build-cont-images
#
# build Docker container images defined by only a Dockerfile
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2017-05-26


# NOTE: see also dd-dt-build-cont-comps


echo
echo 'build Docker container images'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('docker' 'jq' 'realpath')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()

# arguments for every curl call
# http://stackoverflow.com/a/21109454
curl_args=('--show-error' '--silent')


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

# TODO: introduce convention on conf attrs being not set: if a conf file sets
# an attr to 'null', BashLib > get_attrs_from_yaml_file should set it to empty
# or undefine it or whatever, so check if set in here can be done with -n
# TODO: set / unset / null vars in bash: https://stackoverflow.com/a/16753536

# shellcheck disable=SC2034
attrs=(image_conf_path image_name image_tag local_namespace path_to_proj_root)
# shellcheck disable=SC2034
opt_attrs=(build_arg path_to_secrets path_to_vault_token
           secrets_files secrets_filename vault_host vault_paths vault_root)

echo 'Load script configuration file:'
# shellcheck disable=SC2154
if ! get_attrs_from_yaml_file "${conf_file}" attrs opt_attrs; then exit 1; fi


# -----------------------------------------------------------------------------
# configure script parameters, cont.

# path to folder that contains configuration file
if ! path_to_conf_folder="$(dirname "${conf_file}")"
then
    exit 1
fi

# absolute, canonical path to target project root
# shellcheck disable=SC2154
path_to_target_root="$(realpath "${path_to_conf_folder}/${path_to_proj_root}")"

# absolute, canonical path to secrets folder in TARGET project
# NOTE: not using realpath as this folder usually doesn't exist yet
# do this only if target project has secret files;
# testing this in addition to testing secrets_files below
if [ -n "${path_to_secrets}" ]
then
    path_to_secrets="${path_to_target_root}/${path_to_secrets}"
fi

# resolve e.g. "${HOME}" into home folder
# TODO: don't use eval: https://stackoverflow.com/a/41841838
if [ -n "${path_to_vault_token}" ]
then
    path_to_vault_token="$(eval echo "${path_to_vault_token}")"
fi


# -----------------------------------------------------------------------------
# build Docker container images


if ! pushd "${path_to_target_root}" > /dev/null
then
    echo "Failed to pushd to target project root ${path_to_target_root}"
    exit 1
fi


echo

# TODO: do this per image ?
if [ -n "${path_to_secrets}" ]
then
    if [ ! -d "${path_to_secrets}" ]
    then
        mkdir -p "${path_to_secrets}"
    fi
fi


# NOTE: =() is required to clear the array
# when this loop is run the second time
declare -a docker_args=()

# TODO: remove as soon as there is more than one item
# shellcheck disable=SC2043
for attr in build_arg
do
    if [ -n "${!attr}" ]
    then
        # TODO: use switch / case
        if   [ "${attr}" = build_arg ]
        then
            # NOTE: --build-arg, but ${build_arg}
            docker_args+=('--build-arg' "${build_arg}")
        fi
    fi
done

if [ -n "${path_to_secrets}" ] && [ -n "${secrets_files}" ]
then
    echo "Copy files with secrets to ${path_to_secrets}:"
    mapfile -t secrets_files < <(jq -r '.[]' <<< "${secrets_files}")
    for secrets_file in "${secrets_files[@]}"
    do
        echo -n "  ${secrets_file}: "
        if output="$(cp "${secrets_file}" "${path_to_secrets}/" 2>&1)"
        then
            echo 'OK'
        else
            echo 'ERROR'
            echo "  ${output}"
            exit 1
        fi
    done
fi

# shellcheck disable=SC2154
if [ -n "${path_to_secrets}"  ] && [ -n "${path_to_vault_token}" ] && \
   [ -n "${secrets_filename}" ] && [ -n "${vault_paths}"         ] && \
   [ -n "${vault_host}"       ] && [ -n "${vault_root}"          ]
then
    echo "Fetch secrets from vault at ${vault_host}/${vault_root}:"

    # TODO: this duplicates code from .../cicd/bin/deploy used
    # in many projects; refactor out to function or so and re-use
    echo -n "  Get vault token from ${path_to_vault_token}: "
    if output="$(cat "${path_to_vault_token}" 2>&1)"
    then
        vault_token="${output}"
        echo 'OK'
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi

    header_value="X-Vault-Token: ${vault_token}"
    curl_args+=("--header" "${header_value}")

    mapfile -t vault_paths < <(jq -r '.[]' <<< "${vault_paths}")
    secrets_json=''

    for vault_path in "${vault_paths[@]}"
    do
        echo "  ${vault_path}:"

        # shellcheck disable=SC2154
        full_url="${vault_host}/${vault_root}/${vault_path}"

        # NOTE: useful during development and debugging
        # TODO: redact any sensitive data in log output
        # msg="    full 'curl' command line:"$'\n'
        # msg+="      curl --request GET ${curl_args[*]} ${full_url}"
        # echo "${msg}"

        echo -n '    request credentials from vault: '
        # TODO: this displays vault token and retrieved password in log
        # echo
        # echo 'full curl command line:'
        # echo "curl --request GET ${curl_args[*]} ${full_url}"
        if output="$(curl --request GET "${curl_args[@]}" "${full_url}" 2>&1)"
        then
            echo 'OK'
            json_response="${output}"
        else
            echo 'ERROR'
            echo "    ${output}"
            exit 1
        fi

        # echo 'json_response:'
        # jq '.' <<< "${json_response}"
        # sample output:
        # json_response:
        # {
        #   "request_id": "4a2efccb-2c3b-1e9c-5a15-21bca4b3af17",
        #   "lease_id": "",
        #   "renewable": false,
        #   "lease_duration": 0,
        #   "data": {
        #     "password": "<not shown here>",
        #     "username": "<not shown here>"
        #   },
        #   "wrap_info": null,
        #   "warnings": null,
        #   "auth": null
        # }
        #
        # NOTE: attributes inside data (e.g. password, username)
        # vary depending on what was uploaded to vault initially

        # TODO: response is '.errors: []' if no contents
        echo -n '    check vault response: '
        output="$(jq '.errors' <<< "${json_response}")"
        if [ "${output}" = 'null' ]
        then
            echo 'OK'
        else
            echo 'ERROR'
            # TODO: align; add indent
            jq -r '.[]' <<< "${output}"
            exit 1
        fi

        echo -n '    get data from response: '
        output="$(jq '.data' <<< "${json_response}")"
        if [ "${output}" != 'null' ]
        then
            json_data="${output}"
            echo 'OK'
        else
            echo 'ERROR'
            exit 1
        fi

        secrets_json+="${json_data}"
    done

    echo -n "  Save secrets to temp file: "
    # https://stackoverflow.com/a/41218259
    if output="$(jq -s 'add' <<< "${secrets_json}" \
                  > "${path_to_secrets}/${secrets_filename}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "  ${output}"
        exit 1
    fi
fi

# shellcheck disable=SC2154
if [ ! -f "${image_conf_path}" ]
then
    # NOTE: not using realpath as it always fails with
    #   realpath: <image_conf_path>: No such file or directory
    echo 'Failed to find container image configuration file at'
    echo "  $("${image_conf_path}")"
    exit 1
fi

# shellcheck disable=SC2154
image_path="${local_namespace}/${image_name}"

# NOTE: useful during development and debugging
msg="full 'docker build' command line:"$'\n'
msg+="  docker build ${docker_args[*]}"
msg+=" --file ${image_conf_path}"
msg+=" --tag ${image_path}:${image_tag}"
msg+=" $(pwd)"
echo "${msg}"

echo "Build ${image_name} with"
echo "  $(realpath "${image_conf_path}"):"
echo

# NOTE: tagging the image when building is simpler than separate steps
if ! docker build "${docker_args[@]}"                   \
                  --file "${image_conf_path}"           \
                  --tag  "${image_path}:${image_tag}"   \
                  "$(pwd)"
then
    exit 1
fi


# TODO: do this per image ?
if [ -n "${path_to_secrets}" ]
then
    # TODO: this doesn't delete
    # all (parent) folders it creates
    rm -r "${path_to_secrets}"
fi


if ! popd > /dev/null
then
    echo "Failed to popd from target project root ${path_to_target_root}"
    exit 1
fi


echo 'Docker container images build complete'
echo
