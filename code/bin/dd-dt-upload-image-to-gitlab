#!/usr/bin/env bash

# dd-dt-upload-image-to-gitlab
#
# upload a Docker container image to gitlab registry
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2019-01-20


# https://gitlab.com/help/user/project/container_registry
# NOTE: see also dd-dt-download-image-from-gitlab


echo
echo 'upload a Docker container image to gitlab registry'
echo


# -----------------------------------------------------------------------------
# configure script parameters

# absolute path to BashLib library file
path_to_bashlib='/usr/local/lib/dd-bash-lib.sh'

# array with alphabetical list of tools called by this script
# shellcheck disable=SC2034
req_tools=('docker' 'jq')

# array with paths to append to PATH
# shellcheck disable=SC2034
ext_paths=()


# -----------------------------------------------------------------------------
# load BashLib

# shellcheck disable=SC1090
if output="$(source "${path_to_bashlib}" 2>&1)"
then
    source "${path_to_bashlib}"
else
    echo "${output}"
    exit 1
fi


# -----------------------------------------------------------------------------
# run BashLib boilerplate functions

if ! configure_platform              ; then exit 1; fi
if ! extend_path req_tools ext_paths ; then exit 1; fi
if ! get_conf_file_arg "${@}"        ; then exit 1; fi


# -----------------------------------------------------------------------------
# load script configuration

echo

# shellcheck disable=SC2034
attrs=(gitlab_namespace gitlab_reg_url image_name image_tag local_namespace)
# shellcheck disable=SC2034
opt_attrs=()

echo 'Load script configuration file:'
# shellcheck disable=SC2154
if ! get_attrs_from_yaml_file "${conf_file}" attrs opt_attrs; then exit 1; fi


# -----------------------------------------------------------------------------
# upload Docker container images to gitlab registry

echo

docker_args=()

# https://stackoverflow.com/a/43874529
if [ -n "${CI_JOB_TOKEN}" ] && [ -n "${CI_REGISTRY}" ]
then
    # TODO: gitlab_reg_url is also available as ${CI_REGISTRY}
    # TODO: this should not work, token has read access only
    echo 'running in CI/CD context, using CI_* environment variables'
    docker_args+=('--username' 'gitlab-ci-token' '--password' "${CI_JOB_TOKEN}")
fi

# NOTE: when run the first time locally and manually on a new macOS system,
# 'docker login' asks for credentials and adds them to KeyChain automatically:
#   Name:    Docker Credentials   <-- NOTE: there also are Docker credentials
#   Kind:    Internet password              (which a small, not capital c)
#   Account: gitlab+deploy-token-73674
#   Where:   https://registry.gitlab.com

# TODO: try to make use of 'security' macOS cmd line tool:
# https://apple.stackexchange.com/q/170431
# so far, every all fails with
#   security: SecKeychainSearchCopyNext:
#   The specified item could not be found in the keychain.
# TODO: on gitlab CI/CD, this prints a warning
# WARNING! Using --password via the CLI is insecure. Use --password-stdin.
# WARNING! Your password will be stored unencrypted in ...
#  ... /home/gitlab-runner/.docker/config.json.
# Configure a credential helper to remove this warning. See
# https://docs.docker.com/engine/reference/commandline/login/#credentials-store

# TODO: this only works on a local machine if gitlab access is set up:
# credentials are currently taken transparently from macOS Keychain;
# if this is not the case, must get them from vault

# TODO: align this with dd-dt-download-image-from-gitlab:
# get credentials from local secure store or vault and add to conf file

echo -n 'Log into gitlab Docker repository: '
# shellcheck disable=SC2154
if output="$(docker login "${docker_args[@]}" "${gitlab_reg_url}" 2>&1)"
then
    echo 'OK'

    if [ -n "${output}" ]
    then
        echo "${output}"
        echo
    fi
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi


# shellcheck disable=SC2154
repo_uri="${gitlab_reg_url}/${gitlab_namespace}/${image_name}"

repo_tag="${repo_uri}:${image_tag}"
# shellcheck disable=SC2154
local_tag="${local_namespace}/${image_name}:${image_tag}"

echo -n 'Tag Docker container image with repository info: '
if output="$(docker tag "${local_tag}" "${repo_tag}" 2>&1)"
then
    echo 'OK'
    echo
else
    echo 'ERROR'
    echo "${output}"
    exit 1
fi

echo 'Push Docker container image to repository:'
if ! docker push "${repo_tag}"
then
    exit 1
fi

echo
echo 'Remove repository info tag from Docker container:'
if ! docker rmi "${repo_tag}"
then
    exit 1
fi


echo 'Docker container image upload to gitlab registry complete'
echo
