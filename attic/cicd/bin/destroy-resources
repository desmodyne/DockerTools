#!/usr/bin/env bash

# destroy-resources
#
# destroy Docker resources created to build Docker container images
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2017-06-15


# TODO: see also build and build-base-images scripts


echo
echo 'destroy Docker resources'
echo


# -----------------------------------------------------------------------------
# determine platform: http://stackoverflow.com/a/18434831

# NOTE: running this on Linux as a non-privileged user
# requires adding that user to the docker group
# TODO: call (2009 MBP) can not run Docker natively,
# alexa (2015 MBP) can; both run the same operation system

case "${OSTYPE}" in
    darwin*)
        ;;
    linux-*)
        ;;
    *)
        echo "Unsupported operating system: ${OSTYPE}"
        exit 1
        ;;
esac


# -----------------------------------------------------------------------------
# define functions

# http://stackoverflow.com/a/6212408

function usage
{

    # TODO: do not use global variables
    # TODO: space between << and 'EOT' makes a
    # difference for atom syntax highlighting
    # TODO: align properly and remove leading space when printing ?

    read -r -d '' msg_tmpl <<'EOT'
Usage: %s <config file>

mandatory arguments:
  config file           absolute path to configuration file

optional arguments:
  -?, --help            print this help message
EOT

    # shellcheck disable=SC2059
    printf "${msg_tmpl}\\n" "${script_name}"
}


# -----------------------------------------------------------------------------
# process command line arguments

# name of this script: http://stackoverflow.com/q/192319
script_name="$(basename "$0")"

if [ $# -ne 1 ]
then
    usage
    exit 1
fi

# http://stackoverflow.com/a/14203146
while [ $# -gt 0 ]
do
    key="$1"

    case "${key}" in
      # NOTE: must escape -?, seems to act as wildcard otherwise
      -\?|--help) usage; exit 1 ;;

      *)  if [ -z "${config_file}" ]
          then
              config_file="$1"
          else
              usage
              exit 1
          fi
    esac

    # move past argument or value
    shift
done

# TODO: try to use ~/.<script_name>.yaml or so if no config file is passed ?

# config file is a mandatory command line argument
if [ -z "${config_file}" ]
then
    usage
    exit 1
fi

# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html
if [ ! -e "${config_file}" ]
then
    echo "${config_file}: No such file or directory"
    exit 1
fi

if [ ! -r "${config_file}" ]
then
    echo "${config_file}: File is not readable"
    exit 1
fi


# -----------------------------------------------------------------------------
# configure script parameters

# https://stackoverflow.com/a/42099242

# jq expression to get list of networks
jq_expr_network='.[] | select(.network != null) | .network'

# jq expression to get list of volumes
jq_expr_volumes='.[] | select(.volumes != null) | .volumes[]'


# -----------------------------------------------------------------------------
# load script configuration

# NOTE: see config file for parameter documentation
# TODO: error handling, e.g. check if json / yaml keys are available

# http://mikefarah.github.io/yq
config="$(yq r "${config_file}")"

# NOTE: this essentially converts YAML to JSON
cont_image_data="$(yq r -j - complex_images <<< "${config}")"


# -----------------------------------------------------------------------------
# create Docker resources


if ! networks="$(jq -r "${jq_expr_network}" <<< "${cont_image_data}" \
                   | sort | uniq)"
then
    exit 1
fi

if ! volumes="$( jq -r "${jq_expr_volumes}" <<< "${cont_image_data}" \
                   | cut -d ':' -f 1 | sort | uniq)"
then
    exit 1
fi


for network in ${networks}
do
    # https://docs.docker.com/engine/reference/commandline/network_rm
    echo -n "destroy network ${network}: "
    if output="$(docker network rm "${network}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        continue
    fi
done

echo

for volume in ${volumes}
do
    # https://docs.docker.com/engine/reference/commandline/volume_rm
    echo -n "destroy volume ${volume}: "
    if output="$(docker volume rm "${volume}" 2>&1)"
    then
        echo 'OK'
    else
        echo 'ERROR'
        echo "${output}"
        continue
    fi
done

echo


echo 'Docker resource destruction complete'
echo
